package testhomepage;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;


import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.testng.annotations.Parameters;


public class PageOpenTests {

    private static Logger Log = LogManager.getLogger(PageOpenTests.class);

    WebDriver driver;

    @Parameters({"browser"})
    @BeforeClass
    public void init(String browser){

        Log.info("Try to set up browser " + browser);


        if (browser.equals("Chrome")) {
            WebDriverManager.chromedriver().setup();
            Log.info("Browser " + browser + " set up successfully");
        }
        else if (browser.equals("FF")){
            WebDriverManager.firefoxdriver().setup();
            Log.info("Browser " + browser + " set up successfully");
        }
        else{
            Log.fatal("Error - Unknown browser");
            Assert.fail();
        }

        try {
            Log.info("Try to create " + browser + "Driver");

            if (browser.equals("Chrome")) {
                driver = new ChromeDriver();
                Log.info(browser + "driver was created successfully");
            }
            else if (browser.equals("FF")){
                driver = new FirefoxDriver();
                Log.info(browser + "driver was created successfully");
            }
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
            Log.fatal("Error - " + browser +" was not created");
            Assert.fail();
        }
    }

    @Parameters({"hostname"})
    @Test
    public void getHomePage(String hostname) throws Exception {
        Log.info("Try to get " + hostname);

        try {
            driver.get(hostname);
            Log.info(hostname + " was got successfully");
        } catch (Exception e) {
            Log.fatal("Host - " + hostname +" isn't available");
            Assert.fail();
        }

        OtusHome homePage = new OtusHome(driver);

        try {
            Log.info("Check "+ hostname + " home page");

            Assert.assertTrue(homePage.findMainCourses(), "get Otus home page is failed");
        } catch (Exception e) {
            Log.error("Error - " + hostname + " home page didn't get", e);
            throw e;
        }
    }

    @Parameters({"browser"})
    @AfterClass
    public void quitBrowser (String browser) {
        if(driver!=null){
            Log.info("Quit from " + browser);
            driver.quit();
        }
    }

}
